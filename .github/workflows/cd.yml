name: Deploy to S3

on:
  workflow_run:
    workflows: ["Node.js CI Pipeline"]  # Name of your CI workflow
    types:
      - completed
    branches:
      - devel
      - stage
      - prod
    if: ${{ github.event.workflow_run.conclusion == 'success' }}  # Only trigger if CI was successful

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up environment variable for Terraform directory
      - name: Set up environment variable for Terraform directory
        run: |
          if [ "${{ github.ref_name }}" == "stage" ]; then
            echo "TF_ENV=stage" >> $GITHUB_ENV
          elif [ "${{ github.ref_name }}" == "prod" ]; then
            echo "TF_ENV=prod" >> $GITHUB_ENV
          elif [ "${{ github.ref_name }}" == "devel" ]; then
            echo "TF_ENV=devel" >> $GITHUB_ENV
          else
            echo "Unknown branch, failing..."
            exit 1

      # Step 3: Set up Terraform CLI
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2

      # Step 4: Change the working directory to the correct environment folder
      - name: Change directory to environment folder
        run: cd ${{ env.TF_ENV }}

      # Step 5: Initialize Terraform
      - name: Initialize Terraform
        run: terraform init

      # Step 6: Apply Terraform with the correct variable file
      - name: Terraform Apply
        run: terraform apply -auto-approve -var-file=terraform.tfvars

# jobs:
#   deploy:
#     runs-on: ubuntu-latest
#     if: ${{ github.event.workflow_run.conclusion == 'success' }}  # Proceed only if CI was successful

#     steps:
#       # Step 1: Checkout the code
#       - name: Checkout Code
#         uses: actions/checkout@v3
      
#       # Step 2: Configure AWS Credentials
#       - name: Configure AWS Credentials
#         uses: aws-actions/configure-aws-credentials@v3
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ secrets.AWS_REGION }}

#       # Step 2: Set up Terraform
#       - name: Set up environment variable for Terraform directory
#         run: |
#           if [ "${{ github.ref_name }}" == "devel" ]; then
#             echo "TF_ENV=devel" >> $GITHUB_ENV
#           elif [ "${{ github.ref_name }}" == "stage" ]; then
#             echo "TF_ENV=stage" >> $GITHUB_ENV  
#           elif [ "${{ github.ref_name }}" == "prod" ]; then
#             echo "TF_ENV=prod" >> $GITHUB_ENV
#           echo "Unknown branch, failing..."
#             exit 1
#           fi

#       #### Step 3: Set up Terraform CLI
#       - name: Set up Terraform
#         uses: hashicorp/setup-terraform@v2
        
#       - name: Initialize Terraform
#         run: terraform init -backend-config=${{ env.TF_ENV }}/terraform.tfvars

#       - name: Terraform Apply
#         run: terraform apply -auto-approve -var-file=${{ env.TF_ENV }}/terraform.tfvars

#       # Step 5: Sync files to S3
#       - name: Deploy to S3
#         run: |
#           aws s3 sync ./public s3://fsl-devops-challengerr-${{ github.ref_name }}/ --delete